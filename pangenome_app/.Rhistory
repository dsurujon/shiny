runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
names(USArrests)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?read.csv
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
"ass"+"sdf"
character("asd","SDF")
paste("asd","fgg")
runApp()
setwd("C:/Users/Defne/Documents/BC/Van Opijnen Lab/PanGenome/")
library(ggplot2)
library(boot)
setwd("C:/Users/Defne/Documents/BC/TVO/pangenome")
#number of genes shared across all strains
coregenecount<-function(pangenome){
return(length(which(complete.cases(pangenome))))
}
#total number of genes that exist across all strains
allgenecount<-function(pangenome){
if (class(pangenome)=="data.frame"){
ind<-apply(pangenome, 1, function(x) all(is.na(x)))
return(nrow(pangenome)-length(which(ind)))
} else{
return (length(which(!is.na(pangenome))))
}
}
count<-function(data,indices){
d <- data[indices,]
p<-apply(d,1,function(x) length(which(!is.na(x))) )
return (mean(p))
}
iterategenomes<-function(pg,r){
x=seq(0,ncol(pg),by=7)
xlen=length(x)
itercore.mean=rep(0,xlen)
iterpan.mean=rep(0,xlen)
itercore.se=rep(0,xlen)
iterpan.se=rep(0,xlen)
itercore.ci=rep(0,xlen)
iterpan.ci=rep(0,xlen)
for (iter in x){
print(iter)
itercore=rep(0,r)
iterpan=rep(0,r)
for (j in c(1:r)){
mysample=sample(x,iter)
pgsub=pg[,mysample]
itercore[j]<-coregenecount(pgsub)
iterpan[j]<-allgenecount(pgsub)
}
itercore.mean[iter]<-mean(itercore)
iterpan.mean[iter]<-mean(iterpan)
itercore.se[iter]<-sd(itercore)
iterpan.se[iter]<-sd(iterpan)
itercore.ci[iter]<-try(t.test(itercore)$conf.int[2]-itercore.mean[iter])
iterpan.ci[iter]<-try(t.test(iterpan)$conf.int[2]-iterpan.mean[iter])
}
return (list(itercore.mean,itercore.se,itercore.ci,iterpan.mean,iterpan.se,iterpan.ci))
}
main<-function(csvfile){
print(csvfile)
pg<-read.csv(csvfile,header=T)
#blanks are currently empty strings rather than NA
pg<-as.data.frame(lapply(pg,function(x) if(is.character(x)|is.factor(x)) gsub(" ",NA,x) else x))
pgcorecounts<-rep(0,ncol(pg)-1)
pgallcounts<-rep(0,ncol(pg)-1)
#	for (i in c(2:ncol(pg))){
#		pgsub<-pg[,2:i]
#		pgcorecounts[i-1]<-coregenecount(pgsub)
#		pgallcounts[i-1]<-allgenecount(pgsub)
#	}
iterres<-iterategenomes(pg,3)
genecounts<-as.data.frame(cbind(unlist(iterres[1]),unlist(iterres[4]),unlist(iterres[2]),unlist(iterres[5])))
names(genecounts)<-c("itercore.mean","iterpan.mean","itercore.se","iterpan.se")
genecounts$Num.Genome<-c(1:nrow(genecounts))
p<-ggplot(genecounts)+geom_point(aes(Num.Genome,itercore.mean),color="red")+geom_point(aes(Num.Genome,iterpan.mean),color="blue")+geom_errorbar(aes(x=Num.Genome,ymin=itercore.mean-itercore.se, ymax=itercore.mean+itercore.se))
p<-p+geom_line(aes(Num.Genome,itercore.mean))+geom_line(aes(Num.Genome,iterpan.mean))+labs(x="Number of Genomes",y="Number of genes",title="Variation in the Core and Dispensable Genes")+geom_errorbar(aes(x=Num.Genome,ymin=iterpan.mean-iterpan.se, ymax=iterpan.mean+iterpan.se))
pgtest<-data.frame(cbind(as.character(pg$D39),as.character(pg$TIGR4),as.character(pg$X19F)))
print("core genome count for 3 strains: ")
print(coregenecount(pgtest))
print("All gene counts for 3 strains:")
print(allgenecount(pgtest))
print("core genome count for all strains: ")
print(coregenecount(pg))
print("All gene counts for all strains:")
print(allgenecount(pg))
print(p)
write.csv(genecounts,"371_summary.csv",quote=F)
}
main("371_clusters.csv")
View(iterategenomes)
View(iterategenomes)
main<-function(csvfile){
print(csvfile)
pg<-read.csv(csvfile,header=T)
#blanks are currently empty strings rather than NA
pg<-as.data.frame(lapply(pg,function(x) if(is.character(x)|is.factor(x)) gsub(" ",NA,x) else x))
pgcorecounts<-rep(0,ncol(pg)-1)
pgallcounts<-rep(0,ncol(pg)-1)
#	for (i in c(2:ncol(pg))){
#		pgsub<-pg[,2:i]
#		pgcorecounts[i-1]<-coregenecount(pgsub)
#		pgallcounts[i-1]<-allgenecount(pgsub)
#	}
iterres<-iterategenomes(pg,30)
genecounts<-as.data.frame(cbind(unlist(iterres[1]),unlist(iterres[4]),unlist(iterres[2]),unlist(iterres[5])))
names(genecounts)<-c("itercore.mean","iterpan.mean","itercore.se","iterpan.se")
genecounts$Num.Genome<-c(1:nrow(genecounts))
p<-ggplot(genecounts)+geom_point(aes(Num.Genome,itercore.mean),color="red")+geom_point(aes(Num.Genome,iterpan.mean),color="blue")+geom_errorbar(aes(x=Num.Genome,ymin=itercore.mean-itercore.se, ymax=itercore.mean+itercore.se))
p<-p+geom_line(aes(Num.Genome,itercore.mean))+geom_line(aes(Num.Genome,iterpan.mean))+labs(x="Number of Genomes",y="Number of genes",title="Variation in the Core and Dispensable Genes")+geom_errorbar(aes(x=Num.Genome,ymin=iterpan.mean-iterpan.se, ymax=iterpan.mean+iterpan.se))
pgtest<-data.frame(cbind(as.character(pg$D39),as.character(pg$TIGR4),as.character(pg$X19F)))
print("core genome count for 3 strains: ")
print(coregenecount(pgtest))
print("All gene counts for 3 strains:")
print(allgenecount(pgtest))
print("core genome count for all strains: ")
print(coregenecount(pg))
print("All gene counts for all strains:")
print(allgenecount(pg))
print(p)
write.csv(genecounts,"371_summary.csv",quote=F)
}
main("371_clusters.csv")
iterategenomes<-function(pg,r){
x=seq(0,ncol(pg),by=7)
xx=seq(0,ncol(pg))
xlen=length(x)
itercore.mean=rep(0,xlen)
iterpan.mean=rep(0,xlen)
itercore.se=rep(0,xlen)
iterpan.se=rep(0,xlen)
itercore.ci=rep(0,xlen)
iterpan.ci=rep(0,xlen)
for (iter in x){
print(iter)
itercore=rep(0,r)
iterpan=rep(0,r)
for (j in c(1:r)){
mysample=sample(xx,iter)
pgsub=pg[,mysample]
itercore[j]<-coregenecount(pgsub)
iterpan[j]<-allgenecount(pgsub)
}
itercore.mean[iter]<-mean(itercore)
iterpan.mean[iter]<-mean(iterpan)
itercore.se[iter]<-sd(itercore)
iterpan.se[iter]<-sd(iterpan)
itercore.ci[iter]<-try(t.test(itercore)$conf.int[2]-itercore.mean[iter])
iterpan.ci[iter]<-try(t.test(iterpan)$conf.int[2]-iterpan.mean[iter])
}
return (list(itercore.mean,itercore.se,itercore.ci,iterpan.mean,iterpan.se,iterpan.ci))
}
main("371_clusters.csv")
setwd("pangenome_app/")
library(shiny)
runApp()
runApp()
runApp()
?plot
runApp()
runApp()
runApp()
install.packages(rsconnect)
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='dsurujon', token='4F1CED5D0FBFE28A7489A10B928B23C8', secret='+5drWb1/VWfxtsNg8kpnN5mVm4JDaZcP17rbgKTO')
deployApp()
deployApp()
